local function get_pos(x, y)
	local level_pos = go.get_position("level")
	return vmath.vector3(x * 64 - 32 + level_pos.x, y * 64 - 32 + level_pos.y, level_pos.z)
end

local function get_rev_pos(x, y)
	local level_pos = go.get_position("level")
	return vmath.vector3(math.ceil((x - level_pos.x) / 64), math.ceil((y - level_pos.y) / 64), 0)
end
	
local function add_mines(self)
	local x, y, w, h = tilemap.get_bounds("board#tiles")
	for ix = x, x + w - 1 do
		for iy = y, y + h - 1 do
			pos = get_pos(ix, iy)
			self.mines[ix .. ":" .. iy] = factory.create("#mines_factory", pos)
		end
	end
end

local function randomize_colors(self)
	local colors = {}
	for i = 1, 50 do
		colors[i] = 0
	end
	for i = 51, 100 do
		colors[i] = 1
	end
	for i = #colors, 2, -1 do
		local j = math.random(i)
		colors[i], colors[j] = colors[j], colors[i]
	end

	local i = 1
	for key, value in pairs(self.mines) do
		if colors[i] == 0 then
			msg.post(value, "color_red")
		else
			msg.post(value, "color_blue")
		end
		i = i + 1
	end
end

local function hide_colors(self)
	for key, value in pairs(self.mines) do
		local sprite_url = msg.url(nil, value, "sprite")
		sprite.play_flipbook(sprite_url, "mine")
	end
end

local function timer_callback(self, handle, time_elapsed)
	hide_colors(self)
	self.blocked = false
	msg.post("gui/gui#gui", "unblock_input")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.mines = {}
	self.blocked = true
	self.choose = nil
	add_mines(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_game") then
		self.blocked = true
		msg.post("gui/gui#gui", "block_input")
		randomize_colors(self)
		timer.delay(3, false, timer_callback)
	elseif message_id == hash("restart_game") then
		msg.post("gui/gui#gui", "hide_end")
		msg.post("gui/gui#gui", "reset_count")
		self.choose = nil

		msg.post("gui/gui#gui", "block_input")
		self.blocked = true
		randomize_colors(self)
		timer.delay(3, false, timer_callback)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed and not self.blocked then
		local pos = get_rev_pos(action.x, action.y)
		local x = pos.x
		local y = pos.y
		if x <= 0 or y <= 0 then
			return
		end
		local mine_id = x .. ":" .. y
		if self.choose == nil then
			local url = msg.url(nil, self.mines[mine_id], "mine")
			self.choose = go.get(url, "color")
			msg.post("gui/gui#gui", "increase_count")
		else
			local url = msg.url(nil, self.mines[mine_id], "mine")
			local mine_color = go.get(url, "color")
			local mine_opened = go.get(url, "opened")
			if mine_opened then
				return
			end
			if self.choose ~= mine_color then
				self.blocked = true
				msg.post("gui/gui#gui", "show_end")
			else
				msg.post("gui/gui#gui", "increase_count")
			end
		end
		msg.post(self.mines[mine_id], "color")
	end
end
